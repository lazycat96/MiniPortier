package com.jambo.jamil.tcp021018;

import android.Manifest;
import android.content.SharedPreferences;
import android.content.pm.PackageManager;
import android.os.AsyncTask;
import android.os.Environment;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;

import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;

import java.io.OutputStream;
import java.net.Socket;
import java.awt.image.BufferedImage;
import java.io.*;
import java.net.*;
import javax.imageio.ImageIO;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

public class MainActivity extends AppCompatActivity {
    public static final int STATUS_CODE = 0;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        //Set Up Button
        Button click = (Button)findViewById(R.id.button);
        //Sets Up OnClick Listener For Button
        click.setOnClickListener(new View.OnClickListener() {


            @Override
            public void onClick(View v) {

                //Activly Requests Acsess To Files (With Pop-Up)
                if (ContextCompat.checkSelfPermission(MainActivity.this,
                        Manifest.permission.WRITE_EXTERNAL_STORAGE)
                        != PackageManager.PERMISSION_GRANTED) {
                    ActivityCompat.requestPermissions(MainActivity.this,
                            new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE},
                            STATUS_CODE);
                } else {
                    //Runs When Granted Permisssion
                    send sendcode = new send();
                    sendcode.execute();

                }

            }
        });
    }
    @Override
    //More permission Granting code
    public void onRequestPermissionsResult(int requestCode,
                                           String permissions[], int[] grantResults) {
        switch (requestCode) {
            case STATUS_CODE: {
                // If request is cancelled, the result arrays are empty.
                if (grantResults.length > 0
                        && grantResults[0] == PackageManager.PERMISSION_GRANTED) {

                    // TODO run your code
                } else {
                    // TODO show warning
                }
            }
        }
    }
}
//Main Actions - Asynchronous
class send extends AsyncTask<Void,Void,Void> {
    static Socket s; //Socket Variable
    @Override
    protected Void doInBackground(Void...params){
//        Socket clientSocket = null;
//        OutputStream outputStream = null;
//        DataOutputStream dataOutputStream = null;
//        InputStream inputStream = null;
        try {
            s = new Socket("192.168.1.123",8888); //Connects to IP address - enter your IP here
//            outputStream = s.getOutputStream();
//            dataOutputStream = new DataOutputStream(outputStream);
//            inputStream = s.getInputStream();
//            File path = null;
//            dataOutputStream.writeUTF("Hello");
            File directory = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES);//Gets information about a said directory on your device - currently downloads
            File photoPath = new File(directory,  "client.zip"); //Define your image name I used png but other formats should also work - make sure to specify file extension on server
            InputStream input = new FileInputStream(photoPath.getAbsolutePath()); //Gets the true path of your image
//            File folder = new File(directory,  "/client/");
//            File[] listOfFiles = folder.listFiles();
//            int count = listOfFiles.length;
//            dataOutputStream.writeInt(count);
            try {
                try {
//                    for (File file : listOfFiles)
//                        if (file.isFile()) {
//                            System.out.println(file.getName());
//                            String filename = file.getName();
//                            //count = listOfFiles.length;
//                            System.out.println(count);
//                            System.out.println("Client: Reading file");
//                            //BufferedImage image = ImageIO.read(file);
//                            System.out.println("Client: Read file");
//                            ImageIO.write(image, "bmp", s.getOutputStream());
//                            dataOutputStream.writeUTF(filename);
//                            System.out.println("Client: Image sent to server");
//                        }

                    //Reads bytes (all together)
                    int bytesRead;
                    while ((bytesRead = input.read()) != -1) {
                        s.getOutputStream().write(bytesRead); //Writes bytes to output stream
                    }
                } finally {
                    //Flushes and closes socket
                    s.getOutputStream().flush();
                    s.close();
                }
            } finally {
                input.close();
            }


        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }



}
